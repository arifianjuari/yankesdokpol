name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual trigger

env:
  SFTP_SERVER: 31.97.187.135
  SFTP_PORT: 22
  SFTP_USER: root
  SFTP_PASS: ${{ secrets.VPS_PASSWORD }}
  REMOTE_DIR: /var/www/html/yankesdokpol

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lftp sshpass

    - name: List files for debugging
      run: |
        echo "Current directory:"
        pwd
        ls -la
        echo "\nRoot directory files:"
        find . -maxdepth 1 -type f | sort
        echo "\nSubdirectories:"
        find . -maxdepth 1 -type d | sort

    - name: Test SFTP connection
      run: |
        echo "Testing SFTP connection..."
        # Add verbose output for debugging
        sshpass -p "${{ secrets.VPS_PASSWORD }}" sftp -v -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ConnectionAttempts=3 -P ${{ env.SFTP_PORT }} ${{ env.SFTP_USER }}@${{ env.SFTP_SERVER }} <<EOF || echo "SFTP connection failed but continuing"
        pwd
        ls -la
        exit
        EOF
        echo "SFTP connection test completed."

    - name: Deploy using LFTP
      run: |
        echo "Starting deployment..."
        
        # Create deployment script with timeouts
        cat > deploy.lftp << 'EOL'
        debug 3
        set ssl:verify-certificate no
        set sftp:auto-confirm yes
        set net:timeout 180
        set net:max-retries 5
        set net:reconnect-interval-base 10
        set net:reconnect-interval-multiplier 1.5
        set dns:fatal-timeout 60
        
        # Connect to SFTP
        open sftp://${{ env.SFTP_USER }}:${{ env.SFTP_PASS }}@${{ env.SFTP_SERVER }}:${{ env.SFTP_PORT }}
        
        # Create target directory if not exists
        !ssh ${{ env.SFTP_USER }}@${{ env.SFTP_SERVER }} -p ${{ env.SFTP_PORT }} "mkdir -p ${{ env.REMOTE_DIR }} ${{ env.REMOTE_DIR }}/uploads ${{ env.REMOTE_DIR }}/dokumentasi && chmod -R 755 ${{ env.REMOTE_DIR }}"
        
        # Change to target directory
        cd ${{ env.REMOTE_DIR }}
        
        # Mirror project directory to remote (only changed files)
        # Use smaller chunks with fewer parallel transfers
        mirror -v -R --only-newer --ignore-time --parallel=2 --use-cache --no-perms \
          --exclude .git/ \
          --exclude .github/ \
          --exclude .gitignore \
          --exclude .env \
          --exclude node_modules/ \
          --exclude vendor/ \
          --exclude sshkey* \
          --exclude assets/uploads/ \
          --exclude uploads/ \
          --exclude dokumentasi/ \
          .
        
        # Set permissions using SSH instead of SFTP commands
        !ssh ${{ env.SFTP_USER }}@${{ env.SFTP_SERVER }} -p ${{ env.SFTP_PORT }} "
          find ${{ env.REMOTE_DIR }} -type d -not -path \"${{ env.REMOTE_DIR }}/uploads*\" -not -path \"${{ env.REMOTE_DIR }}/dokumentasi*\" -exec chmod 755 {} \; || echo 'Failed to set directory permissions'
          find ${{ env.REMOTE_DIR }} -type f -not -path \"${{ env.REMOTE_DIR }}/uploads*\" -not -path \"${{ env.REMOTE_DIR }}/dokumentasi*\" -exec chmod 644 {} \; || echo 'Failed to set file permissions'
          chmod -R 777 ${{ env.REMOTE_DIR }}/uploads ${{ env.REMOTE_DIR }}/dokumentasi 2>/dev/null || echo 'Failed to set upload directory permissions'
          chown -R www-data:www-data ${{ env.REMOTE_DIR }} || echo 'Failed to set ownership'
        "
        
        # List files after upload
        ls -la
        
        bye
        EOL
        
        # Execute the deployment with timeout
        timeout 600 lftp -f deploy.lftp
        
        echo "Deployment completed successfully!"
